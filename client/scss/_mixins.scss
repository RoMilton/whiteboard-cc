/******************************************************************
Site Name: Whiteboard-cc
Author: Rohan Milton

Stylesheet: mixins

Sass mixins intended to be used by CSS classes via @include functionality

******************************************************************/


// button mixin, inlude with all links
@mixin button{
    cursor: pointer;
}

// border radius amount
$rad: 5px;

// border radius on all sides
@mixin bord_rad{
    border-radius:5px;
}

// border radius on right side only
@mixin bord_rad_right{
    border-top-right-radius:$rad;
    border-bottom-right-radius:$rad;
}

// border radius on left side only
@mixin bord_rad_left{
    border-top-left-radius:$rad;
    border-bottom-left-radius:$rad;
}

// border radius on bottom side only
@mixin bord_rad_bottom{
    border-bottom-right-radius:$rad;
    border-bottom-left-radius:$rad;
}

// border radius on bottom side only
@mixin bord_rad_bottom{
    border-top-right-radius:$rad;
    border-top-left-radius:$rad;
}

// positions a background icon image at left side of element
@mixin icon_image{
    background-position: 50% 50%;
    background-repeat:no-repeat;
    background-size:100%;
    width: 18px;
    height:18px;
    content:"";
    position:absolute;
    left:22px;
    opacity:0.34;
}

/**
 * Adds shadow to element, giving it a sense of elevation according to the Google Material Design spec:
 * http://www.google.com/design/spec/layout/layout-principles.html#layout-principles-dimensionality
 *
 * @param {Level} $level - Number from 1 to 5 (5 being the most elevated and 1 being least elevated)
 */
@mixin box_shadow ($level) {
    @if $level == 1 {
        box-shadow: 0px 2px 3px 0px rgba(0,0,0,0.14);
    } @else if $level == 2 {
        box-shadow: 0px 2px 4px 0px rgba(0,0,0,0.21);
    } @else if $level == 3 {
        box-shadow: 0px 0px 7px 0px rgba(0,0,0,0.67);
    } @else if $level == 4 {
        box-shadow: 0px 0px 8px 0px rgba(0,0,0,0.67);
    } @else if $level == 5 {
        box-shadow: 0px 0px 10px 0px rgba(0,0,0,0.67);
    }
}

// Gives element a coloured shadow for emphasis.
@mixin highlight_shadow () {
    box-shadow: 0 0 3px 3px lighten($bright,7%);
}

/**
* Triangle shape
*
* @param {Direction} $direction - Triangle direction, either `top`, `right`, `bottom` or `left`
* @param {Color} $color - Triangle color 
* @param {Length} $size [1em] - Triangle size
*/
@mixin triangle($direction, $color, $size: 5px) {
    @if not index(top right bottom left, $direction) {
        @error "Direction must be either `top`, `right`, `bottom` or `left`.";
    }

    width: 0;
    height: 0;
    content: '';
    border-#{opposite_direction($direction)}: ($size * 1.5) solid $color;

    $perpendicular-borders: $size solid transparent;

    @if $direction == top or $direction == bottom {
        border-left:   $perpendicular-borders;
        border-right:  $perpendicular-borders;
    } @else if $direction == right or $direction == left {
        border-bottom: $perpendicular-borders;
        border-top:    $perpendicular-borders;
    }
}


/**
* Spins an element clockwise indefinitely.
*
* @param {$duration} duration of each revolution in milliseconds.
*/
@mixin spin-anim($duration : 1000ms){
    -webkit-animation-name: spin;
    -webkit-animation-duration: $duration;
    -webkit-animation-iteration-count: infinite;
    -webkit-animation-timing-function: linear;
    -moz-animation-name: spin;
    -moz-animation-duration: $duration;
    -moz-animation-iteration-count: infinite;
    -moz-animation-timing-function: linear;
    -ms-animation-name: spin;
    -ms-animation-duration: $duration;
    -ms-animation-iteration-count: infinite;
    -ms-animation-timing-function: linear;
    
    animation-name: spin;
    animation-duration: $duration;
    animation-iteration-count: infinite;
    animation-timing-function: linear;

}
@-ms-keyframes spin {
    from { -ms-transform: rotate(0deg); }
    to { -ms-transform: rotate(360deg); }
}
@-moz-keyframes spin {
    from { -moz-transform: rotate(0deg); }
    to { -moz-transform: rotate(360deg); }
}
@-webkit-keyframes spin {
    from { -webkit-transform: rotate(0deg); }
    to { -webkit-transform: rotate(360deg); }
}
@keyframes spin {
    from {
        transform:rotate(0deg);
    }
    to {
        transform:rotate(360deg);
    }
}
